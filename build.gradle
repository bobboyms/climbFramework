
plugins {
    id 'java'
    id 'application'
    id "com.jfrog.bintray" version "1.8.4"
}

group 'br.com.climb'
version '1.0.5'

def localVersion = version.toString()

java {
    sourceCompatibility = JavaVersion.VERSION_1_8
    targetCompatibility = JavaVersion.VERSION_1_8
}

repositories {
    mavenLocal()
    jcenter()
}

dependencies {

    compile 'com.google.guava:guava:28.2-jre'
    compile 'br.com.climb:climb-orm:1.0.9'
    compile 'br.com.climbcommons:climb-commons:1.0.6'

    compile 'ch.qos.logback:logback-classic:1.2.3'

    testCompile 'org.hamcrest:hamcrest-library:2.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.0'

    compile group: 'org.eclipse.jetty', name: 'jetty-server', version: '9.4.12.v20180830'
    compile group: 'org.eclipse.jetty', name: 'jetty-servlet', version: '9.4.12.v20180830'

    compile group: 'cglib', name: 'cglib', version: '3.3.0'
    compile group: 'com.fasterxml.jackson.core', name: 'jackson-databind', version: '2.11.0'

    compile group: 'org.postgresql', name: 'postgresql', version: '42.2.11'
    compile 'io.jsonwebtoken:jjwt:0.7.0'

    compile 'com.mashape.unirest:unirest-java:1.4.9'

    /**************** tomcat *****************/

//    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-core', version: '9.0.30'
//    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-jasper', version: '9.0.30'
//    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-el', version: '9.0.30'
//    compile group: 'org.apache.tomcat.embed', name: 'tomcat-embed-websocket', version: '9.0.30'
//    compile group: 'org.jboss.weld.servlet', name: 'weld-servlet', version: '2.4.8.Final'


}

sourceSets.main.resources {
    exclude 'META-INF/beans.xml'
}

classes {
    doLast{
        copy {
            from('src/main/resources') { include 'META-INF/beans.xml' }
            into "$buildDir/classes/java/main/"
        }
    }
}

allprojects {
    repositories {
        jcenter()
    }
    apply plugin: 'maven'
    apply plugin: 'maven-publish'
    apply plugin: 'java'
}

def pomConfig = {
    licenses {
        license {
            name "The Apache Software License, Version 2.0"
            url "http://www.apache.org/licenses/LICENSE-2.0.txt"
            distribution "repo"
        }
    }
    developers {
        developer {
            id "br.com.climbframework"
            name "climb-framework"
            email "thiago.luiz.rodriguez@gmail.com"
        }
    }

    scm {
        url "https://github.com/bobboyms/climbFramework"
    }
}

task sourceJar(type: Jar) {
    from sourceSets.main.allJava
    archiveClassifier = "sources"
}

publishing {
    publications {
        MyPublication(MavenPublication) {
            from components.java
            artifact sourceJar
            groupId 'br.com.climbframework'
            artifactId 'climb-framework'
            version localVersion
            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Simple framework')
                root.appendNode('name', 'climbFramework')
                root.appendNode('url', 'https://github.com/bobboyms/climbFramework')
                root.children().last() + pomConfig
            }
        }
    }
}

bintray {
    user = 'bobboyms'
    key = '98e82d72304225bd12b4501c2f9997a12f9c00b1'
    publications = ['MyPublication']
    pkg {
        repo = 'climbFramework'
        name = 'climb-framework'
        userOrg = user
        licenses = ['Apache-2.0']
        vcsUrl = 'https://github.com/bobboyms/climbFramework'
        labels = ['REST', 'API','Alternative']
        publicDownloadNumbers = true
        version {
            name = localVersion
            desc = 'new speed framework for rest api'
            vcsTag = localVersion
        }
    }
}

test {
    useJUnitPlatform()
}

application {
    mainClassName = 'br.com.climb.Main'
}

configurations {
    deployerJars
}

jar {
    manifest {
        attributes 'Main-Class': 'br.com.climb.Main'
    }
    from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
    exclude 'META-INF/*.RSA', 'META-INF/*.SF','META-INF/*.DSA'
}